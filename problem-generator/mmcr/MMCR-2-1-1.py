#! /usr/bin/python
#Author: Tony Allard
#Date: 14 Mar 2016
#Description: A Python script for generating random the MMCR problems as described below

#Usage: MMCR-2-1-1.py MaxCargo NumProblems /Path/To/Problems

#Two clusters, one location per cluster, and one vehicle per cluster.
#Clusters are laid out in the following fashion
#
#         0 - 1
#
#Script generates as many problems as given via script arguments. 
#Problems are generated by sampling num cargo between 1 and MaxCargo argument. 
#Cargo origin and desitnation are randomly sampled from all locations, vehicle 
#origin are also randomly sampled from locations within their cluster. However
#because there is only one location per cluster this is fairly trivial 
#
#Time window start time are sampled from zero to minimum estimated delivery 
#(as calculated by a dijkstras algorithm) / 2. Time window end time are sampled
#uniformly from between minimum estimated delivery to 2 * minimum estimated 
#delivery.
#
#Number of vehicles are fixed at 1 vehicles per cluster.
#Capacity is sampled between cargo size to the number of cargo items.
#Load/Unlaod and travel times are fixed at 2
#Vehicle Utilisation cost is uniform at 2
#Cargo Size is defaulted to 1
#
#NOTE: The location layout remains the same for each problem it is randomly
#generated once. Vehicle initial locations are sampled uniformly from this 
#network. Number of cargo and their delivery is also sampled per problem
#

import sys
import random
import MMCRProbGen

def parseArgs(args):
	argName = ("Max Cargo", "Num Problems")
	if (len(args) != 3):
		print "Error: Incorrect number of arguments."
		raise SyntaxError
	i = 0
	params = dict()
	for x in args[:-1]:
		try:
			params[i] = int(x)
		except ValueError:
			print "Error: %s must be an integer" %argName[i]
			raise SyntaxError
		i+=1
	params[len(args)-1]=str(args[-1])
	return params

def printUsage(name):
	print "Multi-Modal Cargo Routing (MMCR) Problem Generator"
	print "By releasing this code we imply no warranty as to its reliability and its use is entirely at your own risk.\n"
	print "Usage " + name + " maxCargo numProblems path\n"
	print "Example: " + name + " 3 100 /Path/To/Problems"

def linkSectors(sectors, travelTime, loadTime, unloadTime, connectivityMap):
	pddl = []
	#link sectors 0 and 1
	pddl += MMCRProbGen.linkSectors(sectors[0], sectors[1], travelTime, loadTime, unloadTime, connectivityMap)
	return pddl

def main(args):
	DEFAULT_CARGO_SIZE = 1
	DEFAULT_TRAVEL_TIME = 2
	DEFAULT_LOAD_TIME = 2
	DEFAULT_UNLOAD_TIME = 2
	DEFAULT_COST = 2
	
	output = []
	params = dict()
	try:
		params = parseArgs(args[1:])
	except:
		printUsage(args[0])
		sys.exit(1)

	numProblems = params[1]
	maxCargo = params[0]
	path = params[2]

	numSectors = 2
	numLocations = 1
	numVehicles = 1
	tightness = 1

	#Create fixed problem segment
	#Create 2 Sectors, 1 location per sector
	sectors, locations, connectivityMap, initPDDL = MMCRProbGen.createSectors(numSectors, numLocations)

	#Create 1 Vehicles per sector
	vehicles, pddl2 = MMCRProbGen.createVehicles(sectors, numVehicles, connectivityMap, DEFAULT_TRAVEL_TIME, DEFAULT_LOAD_TIME, DEFAULT_UNLOAD_TIME, DEFAULT_COST)
	initPDDL += pddl2

	#link sectors
	initPDDL += linkSectors(sectors, DEFAULT_TRAVEL_TIME, DEFAULT_LOAD_TIME, DEFAULT_UNLOAD_TIME, connectivityMap)

	for p in range(0, numProblems):
		
		pddl = []
		pddl += initPDDL
		
		#Sample number of cargo
		numCargo = random.randint(1, maxCargo)
		#Sample capacity
		capacityRange = max(DEFAULT_CARGO_SIZE, numCargo)

		#Add Location Capacity
		pddl += MMCRProbGen.addLocationCapacity(locations, capacityRange)
		#Add Vehicle Capacity
		pddl += MMCRProbGen.addVehicleCapacity(vehicles, capacityRange)

		#Create Cargo
		cargoes, pddl2 = MMCRProbGen.createCargo(numCargo, DEFAULT_CARGO_SIZE)
		pddl += pddl2

		#randomly select vehicle origin
		pddl2, vehicleOriginMap = MMCRProbGen.getVehicleOrigin(vehicles, sectors)
		pddl += pddl2

		#randomly select origin and destination for for cargoes
		goals, deliveryInfo, pddl2 = MMCRProbGen.getRandomCargoLocations(cargoes, locations)
		pddl += pddl2

		#Create Random Time Windows
		pddl += MMCRProbGen.determineTimeWindows(deliveryInfo, connectivityMap, vehicleOriginMap, DEFAULT_TRAVEL_TIME, DEFAULT_LOAD_TIME, DEFAULT_UNLOAD_TIME, tightness)

		#Save problem to file
		name = "Prob-%i-%i-%i-%i-%i"%(len(sectors), len(locations), len(vehicles), len(cargoes), p)
		MMCRProbGen.saveProblem(path+name, locations, vehicles, cargoes, pddl, goals)

#Run Main Function
if __name__ == "__main__":
	main(sys.argv)