#! /usr/bin/python
#Author: Tony Allard
#Date: 14 Mar 2016
#Description: A Python script for generating MMCR problems which enumerate 
#the tightness of time windows as described below.

#Usage: MMCR-Tightness-Geom-4-3-1.py maxCargo maxTightness numProblemsPerCargo numGeom /Path/To/Problems
#
#Four clusters, three locations per cluster, and one vehicle per cluster.
#Clusters are laid out in the following fashion
#
#     0
#    / \
#	1   2
#	 \ /	
#	  3
#
#Script generates as many problems as given via the arguments for the script.
#For example, if there is a maximum of 4 cargo deliveries with 10 problems per cargo
#with a geometric enumeration of 4, 160 problems would result.
#
#Problems are generated in bins from 1 to the maxCargo argument. 
#Cargo origin and desitnation are randomly sampled from all locations per problem. 
#Vehicle origin are also randomly sampled from locations within their cluster. 
#Time windows all start from zero, thereby increasing the possibility of 
#concurrency within the problems, as all delivery problems must be solved at once.
#The end of the time windows are generated by 2 * minimum estimated delivery 
#(as calculated by a dijkstras algorithm), decreasing following a geometic 
#sequence.
#
#Number of vehicles are fixed at 1 vehicles per cluster.
#Capacity is fixed to the number of cargo items, to effectively ensure 
#capacity constraints are not part of the problem. We are only interested in 
#testing the planners performance on time window concurrency.
#Load/Unlaod and travel times are fixed at 2
#Vehicle Utilisation cost is uniform at 2
#Cargo Size is defaulted to 1
#
#NOTE: The location layout remains the same for each problem it is randomly
#generated once. Vehicle initial locations are sampled uniformly from this 
#network. Number of cargo and their delivery is sampled per problem
#

#! /usr/bin/python
import sys
import os
import random
import MMCRProbGen

def printUsage(name):
	print "Multi-Modal Cargo Routing (MMCR) Problem Generator"
	print "By releasing this code we imply no warranty as to its reliability and its use is entirely at your own risk.\n"
	print "Usage " + name + " maxCargo maxTightness numProblemsPerCargo numGeom pathToProblems\n"
	print "Example: " + name + " 3 2 100 5 /Path/To/Problems"

def linkSectors(sectors, connectivityMap, travelTime, loadTime, unloadTime):
	pddl = []
	#link sectors 0 and 1
	pddl += MMCRProbGen.linkSectors(sectors[0], sectors[1], connectivityMap, travelTime, loadTime, unloadTime)
	#link sectors 0 and 2
	pddl += MMCRProbGen.linkSectors(sectors[0], sectors[2], connectivityMap, travelTime, loadTime, unloadTime)
	#link sectors 1 and 3
	pddl += MMCRProbGen.linkSectors(sectors[1], sectors[3], connectivityMap, travelTime, loadTime, unloadTime)
	#link sectors 2 and 3
	pddl += MMCRProbGen.linkSectors(sectors[2], sectors[3], connectivityMap, travelTime, loadTime, unloadTime)
	return pddl

def main(args):
	DEFAULT_CARGO_SIZE = 1
	DEFAULT_TRAVEL_TIME = 2
	DEFAULT_LOAD_TIME = 2
	DEFAULT_UNLOAD_TIME = 2
	DEFAULT_COST = 2
	
	output = []
	argName = ("Max Cargo", "Max Tightness", "Num Problems", "Max Geometric Enumerations", "Path")
	params = dict()
	try:
		params = MMCRProbGen.parseArgs(args[1:], argName)
	except:
		printUsage(args[0])
		sys.exit(1)

	numProblems = params[argName[2]]
	maxCargo = params[argName[0]]
	maxTightness = params[argName[1]]
	maxGeom = params[argName[3]]
	path = params[argName[4]]

	numSectors = 4
	numLocations = 3
	numVehicles = 1
	
	#Create 4 Sectors, three locations per sector
	sectors, locations, connectivityMap, initPDDL = MMCRProbGen.createSectors(numSectors, numLocations)

	#Create one vehicle per sector
	vehicles, pddl2 = MMCRProbGen.createVehicles(sectors, numVehicles, connectivityMap, DEFAULT_TRAVEL_TIME, DEFAULT_LOAD_TIME, DEFAULT_UNLOAD_TIME, DEFAULT_COST)
	initPDDL += pddl2

	#link sectors
	initPDDL += linkSectors(sectors, connectivityMap, DEFAULT_TRAVEL_TIME, DEFAULT_LOAD_TIME, DEFAULT_UNLOAD_TIME)
	
	probNum = 0

	for c in range(1, maxCargo+1):
		#Setup num Cargo
		numCargo = c
		capacityRange = numCargo * DEFAULT_CARGO_SIZE
		
		pddl = []
		pddl += initPDDL
		
		#Add Location Capacity
		pddl += MMCRProbGen.addLocationCapacity(locations, capacityRange)
		#Add Vehicle Capacity
		pddl += MMCRProbGen.addVehicleCapacity(vehicles, capacityRange)
	
		#Create Cargo
		cargoes, pddl2 = MMCRProbGen.createCargo(numCargo, DEFAULT_CARGO_SIZE)
		pddl += pddl2
	
		for p in range(0, numProblems):

			pddl2 = []
			pddl2 += pddl

			#randomly select vehicle origin
			pddl3, vehicleOriginMap = MMCRProbGen.getVehicleOrigin(vehicles, sectors)
			pddl2 += pddl3

			#randomly select origin and destination for for cargoes
			goals, deliveryInfo, pddl3 = MMCRProbGen.getRandomCargoLocations(cargoes, locations)
			pddl2 += pddl3

			for seq in range(0,maxGeom):

				probNum += 1
				
				pddl3 = []
				pddl3 += pddl2		
				tightness = 1 + ((maxTightness - 1) * (1.0 / (2 ** seq)))
				#Create Random Time Windows
				pddl3 += MMCRProbGen.determineTimeWindows(deliveryInfo, connectivityMap, vehicleOriginMap, DEFAULT_TRAVEL_TIME, DEFAULT_LOAD_TIME, DEFAULT_LOAD_TIME, tightness, False, False)

				#Save problem to file
				name = "Prob-%i-%i-%i-%i-%s-%i"%(len(sectors), len(locations), len(vehicles), len(cargoes), str(tightness).replace('.', '_'), probNum)
				MMCRProbGen.saveProblem(path+name, locations, vehicles, cargoes, pddl3, goals)

#Run Main Function
if __name__ == "__main__":
	main(sys.argv)